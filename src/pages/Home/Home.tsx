import { FC, useCallback, useEffect, useRef, useState } from 'react'
import mainImage from '../../assets/images/home-bg.jpg';
import Up from '../../components/Up';
import { Categories } from '../../components/Categories';
import { Sort } from '../../components/Sort';
import { useNavigate } from 'react-router-dom';
import { useAppDispatch } from '../../Redux/store';
import { useSelector } from 'react-redux';
import { selectProductData } from '../../Redux/product/selectors';
import { selectFilter } from '../../Redux/filter/selectors';
import { setCategoryId } from '../../Redux/filter/slice';
import { fetchProducts } from '../../Redux/product/asyncActions';
import qs from 'qs';
import ErrorSticker from '../../assets/images/error.png';
import { ProductBlock } from '../../components/ProductBlock';
import Search from '../../components/Search';
import { Skeleton } from '../../components/ProductBlock/Skeleton';
import emptyProduct from '../../assets/images/empty-product.png';

const Home: FC = () => {

  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  const isMounted = useRef(false);

  const [scroll, setScroll] = useState(0);

  const { items, status } = useSelector(selectProductData);

  const { categoryId, sort, searchValue } = useSelector(selectFilter);

  const sortType = sort;

  const handleScroll = () => {
    setScroll(window.scrollY);
  };
  const handleUpButton = () => {
    window.scrollTo({ top: 0, left: 0, behavior: 'smooth' });
  };

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);

    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const onChangeCategory = useCallback((idx: number) => {
    dispatch(setCategoryId(idx));
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const getProducts = async () => {
    const category = categoryId > 0 ? String(categoryId) : '';
    const search = searchValue;
    const order = sortType.sortOrder;
    const sortBy = sortType.sortProperty;
    dispatch(
      fetchProducts({
        category,
        sortBy,
        order,
        search,
      }),
    );
  };

  useEffect(() => {
    getProducts();
    window.scrollTo(0, scroll);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [categoryId, sortType, searchValue]);


  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sort.sortProperty,
        sortOrder: sort.sortOrder,
        categoryId,
      });

      navigate(`?${queryString}`);
    }
    isMounted.current = true;

  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [categoryId, sort.sortProperty, sort.sortOrder]);

  const products = items.map((obj: any) => <ProductBlock key={obj.id} {...obj} />);

  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);

  return (
    <div className="container">
      <Up value={scroll} handleUpButton={handleUpButton} />
      <div className='home-page'>
          <div className="home-page__title">
            <h1>–ì–ö ¬´–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –î–æ–º–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è¬ª</h1>
            <p>–ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π ¬´–û–î–°–ö¬ª - —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏—Å—Ç–µ–º—ã, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–æ—Å–æ–±–Ω–∞ —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è, –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞,
              –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–∫–∞–∑—ã–≤–∞—è –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –µ–≥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ.–í —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ, 
              –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏, —Ä–∞–±–æ—Ç–∞ –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.</p>
          </div>
          <div className="home-page__imageContainer">
            <img src={mainImage} alt="mainImage" draggable={false} />
          </div>
      </div>
      <div className="search_container" id='catalog'>
        <div>
          <h2 className="content__title">–ù–∞—à–∏ –ñ–ë–ò –∏–∑–¥–µ–ª–∏—è</h2>
          <p>–ù–∞—â–∞ –º–∏—Å—Å–∏—è: –º—ã —Å–æ–∑–¥–∞–µ–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é —Å—Ä–µ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω–∏—Ü–∏–∞–ª –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —É—Å—Ç—Ä–µ–≤–ª–µ–Ω–∏—è</p>
        </div>
        
        <Search />
      </div>
      <div className="content__top">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort value={sort} />
      </div>
      {
        status === 'error' ? (
          <div className="content__error-info">
          <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>

          <p>
            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.
            <br />
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É!
          </p>
          <img src={ErrorSticker} alt="Error products" />
        </div>
        ) : status === 'loading' ? (
          <div className="content__items">
            {skeletons}
          </div>
        ) : products.length > 0 ? (
          <div className="content__items">{products}</div>
        ) : (
          <div className="content__error-info">
          <h2>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä üòï</h2>
          <p>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!
          </p>
          <img src={emptyProduct} alt="empty products" />
        </div>
        )
      }
     
    </div>
  )
}

export default Home